//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/StirControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StirControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StirControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StirControls"",
    ""maps"": [
        {
            ""name"": ""Stir"",
            ""id"": ""5953879f-db32-443e-af34-3ba1ebe1e491"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""7775a135-9288-4b45-9b9b-8f9b549c7547"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""0a516139-428e-4c25-bf77-7beb63971f5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""c034d9e7-4c81-4b82-a226-c4ff76580bc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""0bf6bf75-9bd6-4d6d-9a1b-9ad3072a792c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""05b79045-6c5c-41b3-8180-34ed4d6a9b38"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca538e1b-1dff-48aa-b7a9-a9d4c5e1861f"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52e46b22-b8a4-43bd-926e-ff93873d20bd"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d79678c-2064-49f9-8237-540ba8bb024e"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Stir
        m_Stir = asset.FindActionMap("Stir", throwIfNotFound: true);
        m_Stir_Up = m_Stir.FindAction("Up", throwIfNotFound: true);
        m_Stir_Left = m_Stir.FindAction("Left", throwIfNotFound: true);
        m_Stir_Right = m_Stir.FindAction("Right", throwIfNotFound: true);
        m_Stir_Down = m_Stir.FindAction("Down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Stir
    private readonly InputActionMap m_Stir;
    private List<IStirActions> m_StirActionsCallbackInterfaces = new List<IStirActions>();
    private readonly InputAction m_Stir_Up;
    private readonly InputAction m_Stir_Left;
    private readonly InputAction m_Stir_Right;
    private readonly InputAction m_Stir_Down;
    public struct StirActions
    {
        private @StirControls m_Wrapper;
        public StirActions(@StirControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Stir_Up;
        public InputAction @Left => m_Wrapper.m_Stir_Left;
        public InputAction @Right => m_Wrapper.m_Stir_Right;
        public InputAction @Down => m_Wrapper.m_Stir_Down;
        public InputActionMap Get() { return m_Wrapper.m_Stir; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StirActions set) { return set.Get(); }
        public void AddCallbacks(IStirActions instance)
        {
            if (instance == null || m_Wrapper.m_StirActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StirActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
        }

        private void UnregisterCallbacks(IStirActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
        }

        public void RemoveCallbacks(IStirActions instance)
        {
            if (m_Wrapper.m_StirActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStirActions instance)
        {
            foreach (var item in m_Wrapper.m_StirActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StirActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StirActions @Stir => new StirActions(this);
    public interface IStirActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
    }
}
